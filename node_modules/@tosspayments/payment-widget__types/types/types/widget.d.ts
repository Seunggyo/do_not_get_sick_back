import { MethodId } from '@tosspayments/brandpay-types';
import { AgreementStatus } from '@tosspayments/payment-widget-types';
import { PaymentType } from './payment';
import { Currency } from '../constants/currency';
import { ValueOf } from './typings';
import { CardPaymentRequest, CommonPaymentRequest, ForeignEasyPayPaymentRequest, TranferPaymentRequest, VirtualAccountPaymentRequest } from '@sdk/payment/src/payment/PaymentRequest';
import { RequestPaymentResult } from '@sdk/payment/src/payment/requestPayment';
export interface PaymentMethodsWidget {
    updateAmount: (amount: number, reason?: string | string[]) => void;
    UPDATE_REASON: {
        COUPON: string;
        POINT: string;
    };
    on: (eventName: string, callback: (selectedPaymentMethod: string) => unknown) => void;
    getSelectedPaymentMethod: () => {
        type: ValueOf<typeof PaymentType> | 'CUSTOM';
        method?: string;
        easyPay?: {
            provider: string;
        };
        paymentMethodKey?: string;
    };
}
declare type PaymentRequest = CommonPaymentRequest & Partial<CardPaymentRequest> & Partial<VirtualAccountPaymentRequest> & Partial<TranferPaymentRequest> & Partial<ForeignEasyPayPaymentRequest>;
declare type PaymentRequestWithoutUrl = Omit<PaymentRequest, 'failUrl' | 'successUrl'>;
export declare type PaymentRequestParameters = Omit<PaymentRequest, 'amount'> | Omit<PaymentRequestWithoutUrl, 'amount'>;
export declare type Currency = ValueOf<typeof Currency>;
export interface RenderPaymentMethodsAmountParameter {
    value: number;
    currency?: Currency;
    country?: string;
}
export declare type WidgetRequestPaymentResult = (RequestPaymentResult & {
    paymentType: Extract<PaymentType, 'NORMAL'>;
}) | {
    paymentType: Extract<PaymentType, 'BRANDPAY'>;
    paymentKey: string;
    amount: number;
    orderId: string;
    methodId?: MethodId | undefined;
} | {
    paymentType: Extract<PaymentType, 'KEYIN'>;
    paymentKey: string;
    amount: number;
    orderId: string;
} | void;
export interface Widget {
    renderPaymentMethods: {
        (selector: string, amount: RenderPaymentMethodsAmountParameter | number, options?: {
            variantKey?: string;
        }): PaymentMethodsWidget;
    };
    renderAgreement: (selector: string, options?: {
        variantKey?: string;
    }) => {
        on: (eventName: string, callback: (params: AgreementStatus) => void) => void;
        getAgreementStatus: () => AgreementStatus;
    };
    requestPayment: (parameters: PaymentRequestParameters) => Promise<WidgetRequestPaymentResult>;
}
export {};
