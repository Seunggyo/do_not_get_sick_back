import { BrandpayPaymentState } from '../paymentParams/brandpayPaymentParams';
import { WidgetIframe } from '../../widget-iframe/WidgetIframe';
interface Options {
    redirectUrl?: string;
}
export declare class BrandpayDriver {
    private clientKey;
    customerKey: string | null;
    private paymentMethodsWidget;
    private brandpay;
    private widget;
    status: 'NONE' | 'PENDING' | 'DONE' | 'NOT_USED';
    redirectUrl?: string;
    private uiOptions?;
    constructor(clientKey: string, customerKey: string | null, paymentMethodsWidget: {
        key: string;
        variantKey: string;
        widgetIframe: WidgetIframe;
    }, options?: Options);
    private ready;
    waitForBrandpay: () => Promise<this | null>;
    connectBridge: (amount: number) => Promise<void>;
    dispose: () => void;
    requestPayment: (state: BrandpayPaymentState) => Promise<{
        paymentType: "BRANDPAY";
        paymentKey: string;
        amount: number;
        orderId: string;
        methodId?: string | undefined;
    }>;
    waitForBrandpayClient(): Promise<HTMLIFrameElement>;
    getRequestPaymentParams: (state: BrandpayPaymentState) => {
        methodId?: string | undefined;
        cardInstallmentPlan?: number | undefined;
        useCardPoint?: boolean | undefined;
        discountCode?: string | undefined;
        cashReceipt?: import("@tosspayments/brandpay-types").현금영수증 | undefined;
        amount: number | undefined;
        failUrl: string;
        orderName: string;
        orderId: string;
        customerEmail?: string | undefined;
        taxFreeAmount?: number | undefined;
        successUrl: string;
    } | {
        methodId?: string | undefined;
        cardInstallmentPlan?: number | undefined;
        useCardPoint?: boolean | undefined;
        discountCode?: string | undefined;
        cashReceipt?: import("@tosspayments/brandpay-types").현금영수증 | undefined;
        amount: number | undefined;
        successUrl?: undefined;
        failUrl?: undefined;
        orderName: string;
        orderId: string;
        customerEmail?: string | undefined;
        taxFreeAmount?: number | undefined;
    };
    updateAmount: (amount: number) => void;
    openSettings: () => Promise<void>;
    get options(): {
        clientKey: string;
        customerKey: string;
        redirectUrl: string | undefined;
    };
}
export {};
