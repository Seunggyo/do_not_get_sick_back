import { DefaultCardPaymentRequest } from '@sdk/payment/src/payment/PaymentRequest';
declare type PickMethod = 'amount' | 'orderId' | 'orderName' | 'customerName' | 'customerEmail' | 'taxFreeAmount' | 'successUrl' | 'failUrl';
interface DefaultCardPaymentRequestWithoutUrl extends Omit<DefaultCardPaymentRequest, 'successUrl' | 'failUrl'> {
    successUrl?: never;
    failUrl?: never;
}
export declare type KeyInPaymentParamsWithUrl = Pick<DefaultCardPaymentRequest, PickMethod>;
export declare type KeyInPaymentParamsWithoutUrl = Pick<DefaultCardPaymentRequestWithoutUrl, PickMethod>;
export declare type KeyInPaymentParams = KeyInPaymentParamsWithUrl | KeyInPaymentParamsWithoutUrl;
export declare class KeyInPaymentState {
    amount: KeyInPaymentParams['amount'];
    orderId: KeyInPaymentParams['orderId'];
    orderName: KeyInPaymentParams['orderName'];
    successUrl: KeyInPaymentParams['successUrl'];
    failUrl: KeyInPaymentParams['failUrl'];
    customerName: KeyInPaymentParams['customerName'];
    customerEmail: KeyInPaymentParams['customerEmail'];
    taxFreeAmount: KeyInPaymentParams['taxFreeAmount'];
    constructor({ amount, orderId, orderName, customerName, customerEmail, successUrl, failUrl, taxFreeAmount, }: KeyInPaymentParams);
    getParams(): KeyInPaymentParams;
}
export declare function isKeyInRequestPaymentParamsWithUrl(params: KeyInPaymentParamsWithUrl | KeyInPaymentParamsWithoutUrl): params is KeyInPaymentParamsWithUrl;
export {};
